<?php
 defined('BASEPATH') OR exit('No direct script access allowed'); class Del extends CI_Controller{ public function __construct(){ parent::__construct(); $this->load->model('query','',TRUE); $this->load->model('delete','',TRUE); $this->load->library('basic'); } public function id($id){ $this->basic->is_login(TRUE); @$id = (int)$id; $img = $this->query->img_id($id); switch ($img->storage) { case 'localhost': $path = FCPATH.$img->path; $thumbnail_path = FCPATH.$img->thumb_path; unlink($path); unlink($thumbnail_path); break; case 'backblaze': $this->load->library('backblaze'); $others = $img->others; $others = json_decode($others); $this->backblaze->delete($others->img_fileId,$img->path); $this->backblaze->delete($others->thumb_fileId,$img->thumb_path); break; case 'cos': $this->load->library('tencent'); $this->tencent->delete($img->path); $this->tencent->delete($img->thumb_path); break; case 'ftp': $this->load->library('ftp'); $config = $this->config->item('ftp'); $this->ftp->connect($config); if($this->ftp->delete_file($img->path) != TRUE){ $this->ftp->close(); $this->load->helper('basic'); show_json(-1,'Fail to delete!'); } $this->ftp->delete_file($img->thumb_path); $this->ftp->close(); break; case 'qiniu': $this->load->library('qiniu'); $this->qiniu->delete($img->path); $this->qiniu->delete($img->thumb_path); break; default: exit('参数错误！'); break; } $this->delete->del_img($img->imgid); $re = array( "code" => 200, "id" => $id, "msg" => "删除成功！" ); $re = json_encode($re); echo $re; } public function token($value){ $value = trim($value); $value = strip_tags($value); $len = strlen($value); if($len !== 16){ exit('不是有效的token！'); } $img = $this->query->get_token($value); if($img === NULL){ exit('token不存在，可能是图片已经被删除！'); } $this->delete->del_img($img->imgid); switch ($img->storage) { case 'localhost': $path = FCPATH.$img->path; $thumbnail_path = FCPATH.$img->thumb_path; unlink($path); unlink($thumbnail_path); echo '图片已删除！'; break; case 'backblaze': $this->load->library('backblaze'); $others = $img->others; $others = json_decode($others); $this->backblaze->delete($others->img_fileId,$img->path); $this->backblaze->delete($others->thumb_fileId,$img->thumb_path); exit('图片已删除！'); break; case 'cos': $this->load->library('tencent'); $this->tencent->delete($img->path); $this->tencent->delete($img->thumb_path); exit('图片已删除！'); break; case 'ftp': $this->load->library('ftp'); $config = $this->config->item('ftp'); $this->ftp->connect($config); $this->ftp->delete_file($img->path); $this->ftp->delete_file($img->thumb_path); $this->ftp->close(); exit('图片已删除！'); break; case 'qiniu': $this->load->library('qiniu'); $this->qiniu->delete($img->path); $this->qiniu->delete($img->thumb_path); exit('图片已删除！'); break; default: exit('参数错误！'); break; } } public function batch_del($date,$engine = 'all',$user = 'visitor'){ set_time_limit(3600); $this->load->library('basic'); $this->basic->is_login(TRUE); $date = str_replace(' ','',$date); $date = urldecode($date); $date = explode('|',$date); $start_time = $date[0]; $end_time = $date[1]; switch ($engine) { case 'b2': $storage = 'backblaze'; break; case 'cos': $storage = 'cos'; break; case 'localhost': $storage = 'localhost'; break; case 'ftp': $storage = 'ftp'; break; default: $storage = '%'; break; } switch ($user){ case 'all': $sql_footer = ''; break; case 'visitor': $sql_footer = " AND `user` = 'visitor'"; break; case 'admin': $sql_footer = " AND `user` = 'admin'"; break; default: $sql_footer = ''; break; } $sql = "SELECT id FROM `img_images` WHERE `storage` = '{$storage}' AND (`date` BETWEEN '{$start_time}' AND '{$end_time}')"; $sql .= $sql_footer; $this->load->database(); $query = $this->db->query($sql)->result(); $num = 0; foreach ($query as $value) { ob_start(); $this->id($value->id); ob_end_clean(); $num++; } $data = [ 'code' => 200, 'num' => $num, 'msg' => 'success' ]; exit(json_encode($data)); } } ?>