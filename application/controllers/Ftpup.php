<?php
 ini_set("max_execution_time", "300"); header("Access-Control-Allow-Origin: *"); defined('BASEPATH') OR exit('No direct script access allowed'); class Ftpup extends CI_Controller{ protected $temp; protected $ftp_domain; public function __construct(){ parent::__construct(); $this->load->helper('basic'); ip_block(); $this->load->library('ftp'); $this->load->model('query','',TRUE); $this->temp = FCPATH.'data/temp/'; $this->ftp_domain = $this->query->domain('ftp'); $this->load->library('up_deal'); $this->load->library('basic'); $this->basic->cookie_ban(); } public function upload(){ $config = $this->up_deal->config($this->temp); $this->load->library('upload', $config); $this->up_deal->check_storage_status('ftp'); $starts = $this->up_deal->up_start(); if ( ! $this->upload->do_upload('file')) { $msg = $this->upload->display_errors(); $msg = strip_tags($msg); $this->up_deal->error_msg($msg); } else { $data = $this->upload->data(); $full_path = $data['full_path']; $mime = $data['file_type']; $imgid = md5_file($full_path); $imgid = substr($imgid,8,16); $new_path = $this->temp.$imgid.$data['file_ext']; $ftp_path = '/'.$starts['up_path'].$imgid.$data['file_ext']; $ftp_dir = '/'.$starts['up_path']; $full_thumb_path = $this->temp.'/'.$imgid.'_thumb'.$data['file_ext']; $ftp_thumb_path = '/'.$starts['up_path'].$imgid.'_thumb'.$data['file_ext']; rename($full_path,$new_path); $full_path = $new_path; $this->load->library('image'); if(!$this->image->thumbnail($full_path,290,175)){ $ftp_thumb_path = $ftp_path; } if( $data['file_type'] === 'image/x-ms-bmp' ){ $tmpinfo = getimagesize($full_path); $data['image_width'] = $tmpinfo[0]; $data['image_height'] = $tmpinfo[1]; } if($data['file_type'] === 'image/webp'){ $data['image_width'] = 0; $data['image_height'] = 0; } $this->load->model('insert','',TRUE); $info = $this->up_deal->check_repeat($imgid,$data,$this->ftp_domain); if($info){ $this->up_deal->clean_temp($new_path,$full_thumb_path); $info = json_encode($info); exit($info); } $ftp_config = $this->config->item('ftp'); $this->ftp->connect($ftp_config); $this->ftp->rec_mkdir($ftp_dir); $re_one = $this->ftp->upload($full_path,$ftp_path,'binary',0755); if($ftp_path != $ftp_thumb_path){ $re_two = $this->ftp->upload($full_thumb_path,$ftp_thumb_path,'binary',0755); } else{ $re_two = TRUE; } if( ( ! $re_one) OR (! $re_two) ){ $this->up_deal->clean_temp($new_path,$full_thumb_path); $this->up_deal->error_msg('请求接口失败！'); } $img = json_decode($re_one); $img_thumb = json_decode($re_two); $others = array( "size" => $data['file_size'] ); $others = json_encode($others); $token = $this->up_deal->token($starts); $delete = $this->basic->domain().'/delete/'.$token; $datas = array( "imgid" => $imgid, "path" => $ftp_path, "thumb_path"=> $ftp_thumb_path, "storage" => "ftp", "ip" => get_ip(), "ua" => get_ua(), "date" => $starts['date'], "user" => $starts['user'], "level" => 'unknown', "token" => $token ); $imginfo = array( "imgid" => $imgid, "mime" => $mime, "width" => $data['image_width'], "height" => $data['image_height'], "ext" => $data['file_ext'], "client_name" => $data['client_name'], "size" => $data['file_size'] ); $id = $this->insert->images($datas); $imginfo = $this->insert->imginfo($imginfo); $this->up_deal->clean_temp($new_path,$full_thumb_path); if($id && $imginfo) { $info = array( "code" => 200, "id" => $id, "imgid" => $imgid, "relative_path" => $ftp_path, "url" => $this->ftp_domain.$ftp_path, "thumbnail_url" => $this->ftp_domain.$ftp_thumb_path, "width" => $data['image_width'], "height" => $data['image_height'], "delete" => $delete ); $info = json_encode($info); exit($info); } } } protected function __destruct(){ $this->ftp->close(); } }