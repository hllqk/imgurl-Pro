<?php
 header("Access-Control-Allow-Origin: *"); defined('BASEPATH') OR exit('No direct script access allowed'); class Upload extends CI_Controller{ public $upload_path; public $relative_path; public $image_lib; public $date; public $temp; protected $user; protected $main_domain; public function __construct() { parent::__construct(); $this->load->helper('basic'); ip_block(); $this->upload_path = FCPATH.'imgs/'.date('Y',time()).'/'.date('m',time()).'/'; $this->upload_path = str_replace('\\','/',$this->upload_path); $this->relative_path = "/imgs/".date('Y',time()).'/'.date('m',time()).'/'; $this->relative_path = str_replace('\\','/',$this->relative_path); $this->temp = FCPATH.'data/temp/'; if(!is_dir($this->upload_path)){ mkdir($this->upload_path,0777,TRUE); } $this->date = date('Y-m-d H:i',time()); $this->load->helper('basic'); $ip = get_ip(); $this->load->library('basic'); $this->basic->cookie_ban(); $this->load->library('up_deal'); $this->load->model('query','',TRUE); $this->main_domain = $this->basic->domain(); $this->user = $this->up_deal->up_start()['user']; } public function localhost($type = 'json'){ $config = $this->up_deal->config($this->temp); $this->load->library('upload', $config); if ( ! $this->upload->do_upload('file')) { $msg = $this->upload->display_errors(); $msg = strip_tags($msg); $this->error_msg($msg); } else { $data = $this->upload->data(); $this->load->model('insert','',TRUE); $this->load->model('query','',TRUE); $file_name = md5_file($data['full_path']); $file_name = substr($file_name,8,16); $imgid = $file_name; $file_name = $file_name.$data['file_ext']; $full_path = $this->upload_path.$file_name; $full_path = str_replace("\\","/",$full_path); $relative_path = $this->relative_path.$file_name; $thumbnail_path = $this->relative_path.$imgid.'_thumb'.$data['file_ext']; $domain = $this->query->domain('localhost'); $url = $domain.$relative_path; $thumbnail_url = $domain.$thumbnail_path; rename($data['full_path'],$full_path); $this->load->library('image'); if(!$this->image->thumbnail($full_path,290,175)){ $thumbnail_url = $domain.$relative_path; } if( $data['file_type'] === 'image/x-ms-bmp' ){ $tmpinfo = getimagesize($full_path); $data['image_width'] = $tmpinfo[0]; $data['image_height'] = $tmpinfo[1]; } if($data['file_type'] === 'image/webp'){ $data['image_width'] = 0; $data['image_height'] = 0; } if($imginfo = $this->query->repeat($imgid)){ $id = $imginfo->id; $info = array( "code" => 200, "id" => $id, "imgid" => $imgid, "relative_path" => $relative_path, "url" => $url, "thumbnail_url" => $thumbnail_url, "width" => $data['image_width'], "height" => $data['image_height'] ); $this->re_data($type,$info); } else{ $arr = array( "ip" => get_ip(), "ua" => get_ua(), "date" => $this->date ); $token = $this->token($arr); $delete = $this->main_domain.'/delete/'.$token; $datas = array( "imgid" => $imgid, "path" => $relative_path, "thumb_path"=> $thumbnail_path, "storage" => "localhost", "ip" => get_ip(), "ua" => get_ua(), "date" => $this->date, "user" => $this->user, "level" => 'unknown', "token" => $token ); $imginfo = array( "imgid" => $imgid, "mime" => $data['file_type'], "width" => $data['image_width'], "height" => $data['image_height'], "ext" => $data['file_ext'], "client_name" => $data['client_name'], "size" => $data['file_size'] ); $id = $this->insert->images($datas); $this->insert->imginfo($imginfo); $info = array( "code" => 200, "id" => $id, "imgid" => $imgid, "relative_path" => $relative_path, "url" => $url, "thumbnail_url" => $thumbnail_url, "width" => $data['image_width'], "height" => $data['image_height'], "delete" => $delete ); $this->re_data($type,$info); } } } protected function re_data($type,$info){ $url = $info['url']; switch ($type) { case 'json': $this->succeed_msg($info); break; case 'url': echo $url; break; case 'html': echo "<img src = '$url' />"; break; case 'markdown': echo "![]($url)"; break; case 'bbcode': echo "[img]".$url."[/img]"; break; default: $this->succeed_msg($info); break; } } protected function succeed_msg($data){ $info = json_encode($data); echo $info; exit; } protected function error_msg($msg){ $data = array( "code" => 0, "msg" => $msg ); $data = json_encode($data); echo $data; exit; } public function url(){ $url = @$this->input->post('url',TRUE); $url = trim($url); $this->load->library('basic'); $this->basic->is_login(TRUE); if(!filter_var($url, FILTER_VALIDATE_URL)){ $this->error_msg('不是有效的URL地址！'); } $url_arr = explode('.',$url); $ext = strtolower(end($url_arr)); switch($ext){ case 'png': case 'jpg': case 'jpeg': case 'bmp': case 'gif': case 'bmp': break; default: $this->error_msg('不是有效的图片地址！'); exit; } $pic_data = $this->basic->dl_pic($url); $tmp_name = $this->temp.md5($url); file_put_contents($tmp_name,$pic_data); $imgid = md5_file($tmp_name); $imgid = substr($imgid,8,16); $file_name = $imgid.'.'.$ext; $relative_path = $this->relative_path.$file_name; $ext = '.'.$ext; if($this->query->repeat($imgid)){ unlink($tmp_name); $this->error_msg('文件已经上传过！'); exit; } $full_path = $this->upload_path.$file_name; copy($tmp_name,$full_path); unlink($tmp_name); $this->load->library('image'); $this->image->thumbnail($full_path,290,175); $img_info = getimagesize($full_path); $thumbnail_path = $this->relative_path.$imgid.'_thumb'.$ext; $datas = array( "imgid" => $imgid, "path" => $relative_path, "thumb_path"=> $thumbnail_path, "storage" => "localhost", "ip" => get_ip(), "ua" => get_ua(), "date" => $this->date, "user" => $this->user, "level" => 'unknown' ); $imginfo = array( "imgid" => $imgid, "mime" => $img_info['mime'], "width" => $img_info[0], "height" => $img_info[1], "ext" => $ext, "client_name" => $file_name ); $this->load->model('insert','',TRUE); $id = $this->insert->images($datas); $this->insert->imginfo($imginfo); $domain = $this->query->domain('localhost'); $url = $domain.$relative_path; $re = array( "code" => 200, "msg" => $url ); $re = json_encode($re); echo $re; } public function parse(){ $date = date('Y-m-d H:i:s',time()); $tmp_name = get_ip().get_ua().$date; $tmp_name = md5($tmp_name); $tmp_file = $this->temp.$tmp_name; $picfile = $_POST['content']; $picfile = base64_decode($picfile); file_put_contents($tmp_file, $picfile); if(!mime($tmp_file)){ unlink($tmp_file); $this->error_msg('不允许的文件类型！'); exit; } $imgid = md5_file($tmp_file); $imgid = substr($imgid,8,16); $ext = ext($tmp_file); $file_name = $imgid.$ext; $relative_path = $this->relative_path.$file_name; $full_path = $this->upload_path.$file_name; if($this->query->repeat($imgid)){ unlink($tmp_file); $this->error_msg('文件已经上传过！'); exit; } copy($tmp_file,$full_path); $file_name = $imgid.$ext; unlink($tmp_file); $this->load->library('image'); $this->image->thumbnail($full_path,290,175); $thumbnail_path = $this->relative_path.$imgid.'_thumb'.$ext; $img_info = getimagesize($full_path); $arr = array( "ip" => get_ip(), "ua" => get_ua(), "date" => $this->date ); $token = $this->token($arr); $delete = $this->main_domain.'/delete/'.$token; $datas = array( "imgid" => $imgid, "path" => $relative_path, "thumb_path"=> $thumbnail_path, "storage" => "localhost", "ip" => get_ip(), "ua" => get_ua(), "date" => $this->date, "user" => $this->user, "level" => 'unknown', "token" => $token ); $imginfo = array( "imgid" => $imgid, "mime" => $img_info['mime'], "width" => $img_info[0], "height" => $img_info[1], "ext" => $ext, "client_name" => $file_name ); $this->load->model('insert','',TRUE); $id = $this->insert->images($datas); $this->insert->imginfo($imginfo); $domain = $this->query->domain('localhost'); $url = $domain.$relative_path; $thumbnail_url = $domain.$this->relative_path.$imgid.'_thumb'.$ext; $info = array( "code" => 200, "id" => $id, "imgid" => $imgid, "relative_path" => $relative_path, "url" => $url, "thumbnail_url" => $thumbnail_url, "width" => $img_info[0], "height" => $img_info[1], "delete" => $delete ); $this->succeed_msg($info); } protected function token($arr){ $ip = $arr['ip']; $ua = $arr['ua']; $date = $arr['date']; $str = GetRandStr(4); $token = $ip.$ua.$date.$str; $token = md5($token); $token = substr($token, 8, 16); return $token; } } ?>