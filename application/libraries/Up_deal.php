<?php
 defined('BASEPATH') OR exit('No direct script access allowed'); class Up_deal{ protected $CI; public $date; public $temp; protected $user; protected $main_domain; public function __construct(){ $this->CI = & get_instance(); $this->CI->load->model('query','',TRUE); $this->CI->load->helper('basic'); $this->CI->load->library('basic'); $this->temp = FCPATH.'data/temp/'; $this->date = date('Y-m-d H:i',time()); } public function check_storage_status($storage){ header('Content-Type:application/json; charset=utf-8'); if( ! $this->CI->query->check_storage_status($storage) ){ $this->error_msg('该接口已关闭，请选择其它接口上传！'); } if( (! $this->CI->basic->is_login(FALSE)) && (! $this->CI->query->check_storage_permission($storage)) ){ $this->error_msg('此接口不允许游客上传，请选择其它接口上传！'); } } public function up_start(){ $up['ip'] = get_ip(); $up['ua'] = $_SERVER['HTTP_USER_AGENT']; $up['date'] = $this->date; $up['up_path'] = 'imgs/'.date('Y',time()).'/'.date('m',time()).'/'; $token = $this->CI->query->read_token()->values; $switch = $this->CI->query->read_token()->switch; $sign = @$this->CI->input->post('token',TRUE); if( isset($sign) && ($token === $sign) && ($switch === 'ON') ){ $up['user'] = 'admin'; } elseif( isset($sign) && ($switch === 'OFF') ){ $this->CI->load->helper('basic'); show_json(401,'authentication failed!'); } elseif( isset($sign) && ($token != $sign) ){ $this->CI->load->helper('basic'); show_json(401,'authentication failed!'); } elseif($this->CI->basic->is_login(FALSE)){ $up['user'] = 'admin'; } else{ $up['user'] = 'visitor'; if($this->CI->query->uplimit($up['ip']) === FALSE){ $this->error_msg("上传达到上限！"); } } return $up; } public function check_repeat($imgid,$data,$domain = null){ $domain = $this->CI->query->imgid_get_domain($imgid)->domains; if($imginfo = $this->CI->query->repeat($imgid)){ $id = $imginfo->id; $url = $domain.$imginfo->path; $thumbnail_url = $domain.$imginfo->thumb_path; $info = array( "code" => 200, "id" => $id, "imgid" => $imgid, "relative_path" => $relative_path, "url" => $url, "thumbnail_url" => $thumbnail_url, "width" => $data['image_width'], "height" => $data['image_height'] ); return $info; } else{ return FALSE; } } public function clean_temp($imgfile,$img_thumb){ unlink($imgfile); unlink($img_thumb); } public function error_msg($msg){ header('Content-Type:application/json; charset=utf-8'); $data = array( "code" => 0, "msg" => $msg ); $data = json_encode($data); echo $data; exit; } public function token($arr){ $ip = $arr['ip']; $ua = $arr['ua']; $date = $arr['date']; $str = GetRandStr(4); $token = $ip.$ua.$date.$str; $token = md5($token); $token = substr($token, 8, 16); return $token; } public function config($temp){ $config['max_size'] = $this->CI->query->get_uplimit('max_size') * 1024; $config['upload_path'] = $temp; $config['allowed_types'] = 'gif|jpg|jpeg|png|bmp|webp'; $config['file_ext_tolower'] = TRUE; $config['overwrite'] = TRUE; $config['encrypt_name'] = TRUE; return $config; } }