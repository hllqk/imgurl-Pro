<?php
 class Qiniu{ protected $CI; protected $access_key; protected $secret_key; protected $bucket; public function __construct(){ $this->CI = & get_instance(); $this->access_key = $this->CI->config->item('qiniu')['AccessKey']; $this->secret_key = $this->CI->config->item('qiniu')['SecretKey']; $this->bucket = $this->CI->config->item('qiniu')['bucket']; $up_host = $this->CI->config->item('qiniu')['up_host']; define('QINIU_UP_HOST', $up_host); define('QINIU_RSF_HOST', 'http://rsf.qiniu.com'); define('QINIU_RS_HOST', 'http://rs.qiniu.com'); } protected function qn_base64_encode ($data) { return str_replace(array('+', '/'), array('-', '_'), base64_encode($data)); } public function upload ($file, $filename) { $accessKeyId = $this->access_key; $accessKeySecret = $this->secret_key; $bucket = $this->bucket; $url = QINIU_UP_HOST; $options = json_encode(array( 'scope' => $bucket, 'deadline' => time() + 3600 )); $hash = hash_hmac( 'sha1', $this->qn_base64_encode($options), $accessKeySecret, true ); $auth = $accessKeyId . ':' . $this->qn_base64_encode($hash) . ':' . $this->qn_base64_encode($options); $headers = array( 'Content-Type: multipart/form-data' ); $postfileds = array( 'token' => $auth, 'key' => $filename, 'file' => new CURLFile($file) ); return $this->curl($url, $headers, 'POST', '', $postfileds); } function delete ($filename) { $accessKeyId = $this->access_key; $accessKeySecret = $this->secret_key; $bucket = $this->bucket; $options = '/delete/' . $this->qn_base64_encode($bucket . ':' . $filename); $url = QINIU_RS_HOST . $options; $hash = hash_hmac( 'sha1', $options . "\n", $this->secret_key, true ); $auth = $this->access_key . ':' . $this->qn_base64_encode($hash); $headers = array( "Authorization: QBox $auth" ); return $this->curl($url, $headers, 'POST'); } protected function curl ($url, $headers, $method = '', $file = '', $postfileds = '') { $curl_handle = curl_init(); curl_setopt($curl_handle, CURLOPT_URL, $url); curl_setopt($curl_handle, CURLOPT_HTTPHEADER, $headers); curl_setopt($curl_handle, CURLOPT_RETURNTRANSFER, 1); if ($method) { curl_setopt($curl_handle, CURLOPT_CUSTOMREQUEST, strtoupper($method)); } if ($file) { curl_setopt($curl_handle, CURLOPT_UPLOAD, 1); $file_handle = fopen($file, 'rb'); curl_setopt($curl_handle, CURLOPT_READDATA, $file_handle); } if ($postfileds) { curl_setopt($curl_handle, CURLOPT_POSTFIELDS, $postfileds); } $response = curl_exec($curl_handle); $info = curl_getinfo($curl_handle); curl_close($curl_handle); if ($file) { fclose($file_handle); } return $response; } }